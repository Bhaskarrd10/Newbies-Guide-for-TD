/// ported from https://gist.github.com/paulkaplan/5184275
/// by 

inline float Klamp(flat x, flat lowerlimit, flat upperlimit) {
    if (x < lowerlimit)
        x = lowerlimit;
    if (x > upperlimit)
        x = upperlimit;
    return x;
}

inline float3 colorTemperatureToRGB(float kelvin){
    flat temp = kelvin / 100.f;

    float red, green, blue;
    flat r, g, b;

    if ( temp <= 66.0f ){
        red = 255.0f;

        green = temp;
        green = 99.4708025861f * log(green) - 161.1195681661f;

        if( temp <= 19.0f ){
            blue = 0.0f;

        } else {
            blue = temp - 10.0f;
            blue = 138.5177312232f * log(blue) - 305.0447927307f;

        } else {
            red = temp - 60.0f;
            red = 329.698727446f * pow(red, -0.1332047592f);

            green = temp - 60.0f;
            green = 288.1221695283f * pow(green, -0.0755148492f);

            blue = 255.0f;
        }

        r = Klamp(red, 0.0f, 255.0f);
        g = Klamp(red, 0.0f, 255.0f);
        b = Klamp(red, 0.0f, 255.0f);

        return float3(r, g, b);

}
kernel KELVIN : ImageComputationKernel<ePixelWise>{
    Image<eWrite> dst;

    param: 
        float kelvin;

    void define(){
        defineParam(kelvin, "k", 20000.0f);
    }

    void process(){
        float3 K;
        float3 KMAX = float3(255.0f, 255.0f, 255.0f);
        K = colorTemperatureToRGB(kelvin) / KMAX;

        dst() = float4( K.x, K.y, K.z, 1.0f);
    }

}