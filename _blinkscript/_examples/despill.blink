//---------------------------------------------------------
// apDespillKernel - apDespill v1.0 by Adrian Pueyo
//
// Despill an image, with options to despill any hue (and
// not only the primaries), select different algorithms for
// des/respilling, and protect tones from the despill.
//
// adrianpueyo.com, 2014-2017
// ---------------------------------------------------------

static inline float y_convert_ccir601(const float4 in){
  return in.x * 0.299f + in.y * 0.587f + in.z * 0.114f;
}

static inline float y_convert_rec709(const float4 in){
  return in.x * 0.2125f + in.y * 0.7154f + in.z * 0.0721f;
}

static inline float4 hueShift(const float4 in, const float H){
  if(H==0.0f){
    return in;
  }else{
    float U = cos(H*PI/180);
    float W = sin(H*PI/180);
    float3 ret;
    ret.x = (.299+.701*U+.168*W)*in.x + (.587-.587*U+.330*W)*in.y + (.114-.114*U-.497*W)*in.z;
    ret.y = (.299-.299*U-.328*W)*in.x + (.587+.413*U+.035*W)*in.y + (.114-.114*U+.292*W)*in.z;
    ret.z = (.299-.3*U+1.25*W)*in.x + (.587-.588*U-1.05*W)*in.y + (.114+.886*U-.203*W)*in.z;
    return float4(ret.x,ret.y,ret.z,in[3]);
  }
}

static inline float4 hueRotate(const float4 in, const float H){
  if(H==0.0f){
    return in;
  }else{
    float cosH = cos(H*PI/180);
    float sinH = sin(H*PI/180);
    float3 ret;
    ret.x = (in.x+in.y+in.z)*(1-cosH)/3 + in.x*cosH + (-in.y/sqrt(3.0f)+in.z/sqrt(3.0f))*sinH;
    ret.y = (in.x+in.y+in.z)*(1-cosH)/3 + in.y*cosH + (in.x/sqrt(3.0f)-in.z/sqrt(3.0f))*sinH;
    ret.z = (in.x+in.y+in.z)*(1-cosH)/3 + in.z*cosH + (-in.x/sqrt(3.0f)+in.y/sqrt(3.0f))*sinH;
    return float4(ret.x,ret.y,ret.z,in[3]);
  }
}

float3 vecToPlane(float3 v1, float3 v2 = float3(1.0f,1.0f,1.0f)){
  float3 v1onv2;
  v1onv2 = v2 * float((float(dot(v2,v1))/float(dot(v2,v2)))); //Projection of vector on another (plane's normal)
  return v1-v1onv2; //Projection of vector on plane
}

static inline float colorAngle(const float3 v1, const float3 v2){
  const float3 vN=float3(1.0f,1.0f,1.0f);
  float ang = acos(float(dot(v1,v2))/float(sqrt(dot(v1,v1)*dot(v2,v2))));
  float3 crs = cross(v1,v2);
  if (dot(vN, crs) > 0) {
    ang = -ang;
  }
  return ang;
}

kernel apDespillKernel : ImageComputationKernel<ePixelWise>
{
  Image<eRead, eAccessPoint, eEdgeClamped> src;
  Image<eWrite> dst;

  param:
    float limit;
    float shift;
    float weights;
    int outmode;//0=despill,1=spill
    int output_alpha;
    int clr; //0=red,1=green,2=blue
    int mode; //0=average,1=maximum,2=minimum,3=custom
    int respill_math; //0=Rec709,1=Ccir601,2=Avg,3=Max
    float4 respill_color;
    int prot1_on;
    int prot1_preview;
    float3 prot1;
    float prot1_tolerance;
    float prot1_mult;
    float prot1_falloff;
    int lumaHueShift;//If disabled, the hue is just rotated without the luma coefficients
    float3 pickSpill;
  local:
    int _usePicked;
    int _clr;
    int _ret;

  void define() {
    defineParam(limit, "limit", 1.0f);
    defineParam(shift, "shift", 0.0f);
  }

  void init() {
    _ret = 0;
    if(clr!=3){//red green or blue
      _usePicked = 0;
      _clr = clr;
    }else if(pickSpill.x==pickSpill.y && pickSpill.x==pickSpill.z){
      _ret = 1;//if "custom" selected but has a gray value, avoid any calculations
    }else{
      _usePicked = 1;
      _clr = 0;
    }
  }

  void process() {

    if(_ret == 1){ dst()=src(); return; }//Avoid any calculations if no despill selected
    //0. Calculate autoShift if picked spill is not 0
    float autoShift = 0.0f;
    if(_usePicked==1){
      float3 vNorm = float3(1.0f,1.0f,1.0f);
      autoShift = colorAngle(vecToPlane(pickSpill,vNorm),vecToPlane(float3(1.0f,0.0f,0.0f),vNorm));
      autoShift = autoShift*180/PI;//to deg
    }

    //1. HueShift IN
    float4 despilled;
    if (lumaHueShift==1){
      despilled = hueShift(src(),shift-autoShift);
    }else{
      despilled = hueRotate(src(),shift-autoShift);
    }

    //2. Calculate the limit
    float resultLimit = 0.0f;
    int2 others;
    if(_clr==0){//If red (and if _usePicked, also set red)
      others = int2(1,2);
    }else if(_clr==1){
      others=int2(0,2);
    }else if(_clr==2){
      others=int2(0,1);
    }

    if(mode==0){//average
      resultLimit = (despilled[others[0]]+despilled[others[1]])/2;
    }else if(mode==1){//max
      resultLimit = max(despilled[others[0]],despilled[others[1]]);
    }else if(mode==2){//min
      resultLimit = min(despilled[others[0]],despilled[others[1]]);
    }else{//custom
      resultLimit = despilled[others[0]]*weights+despilled[others[1]]*(1-weights);
    }

    //3. Protect tones
    float prot1_result;
    if(prot1_on==1&&(prot1[0]!=prot1[1]||prot1[0]!=prot1[2]||prot1[1]!=prot1[2])){
      float cos_prot1_angle;
      cos_prot1_angle = (src(0)*prot1[0]+src(1)*prot1[1]+src(2)*prot1[2]) / (sqrt(prot1[0]*prot1[0]+prot1[1]*prot1[1]+prot1[2]*prot1[2]) * sqrt(src(0)*src(0)+src(1)*src(1)+src(2)*src(2)));
      prot1_result = pow(clamp(cos_prot1_angle,0.0f,1.0f),1/pow(prot1_tolerance,prot1_falloff));
      resultLimit = resultLimit*(1+prot1_result*prot1_mult);
    }
    

    //4. Calculate the despill and return the hue shift
    for (int component = 0; component < dst.kComps; component++){
      despilled[component] = component==_clr?min(despilled[component],resultLimit*limit):despilled[component];
    }
    if (lumaHueShift==1){
      despilled = hueShift(despilled,-shift+autoShift);
    }else{
      despilled = hueRotate(despilled,-shift+autoShift);
    }

    //5. Respill/restore despill values
    float luma;
    float4 spill = src()-despilled;
    if(respill_math==0){
      luma = y_convert_rec709(spill);
    }else if(respill_math==1){
      luma = y_convert_ccir601(spill);
    }else if(respill_math==2){
      luma = (spill[0]+spill[1]+spill[2])/3;
    }else{
      luma = max(max(spill[0],spill[1]),spill[2]);
    }

    //6. Output (options)
    if(prot1_preview==1 && prot1_on==1){
      dst() = src()*clamp(prot1_result*prot1_mult,0.0f,1.0f);
    }else if(outmode==0){
      dst() = despilled+luma*respill_color;
      if(output_alpha==0){
        dst(3)=src(3);
      }else{
        dst(3)=luma;
      }
    }else{
      if(output_alpha==0){
        spill[3]=src(3);
      }else{
        spill[3]=luma;
      }
      dst() = spill;
    }
    //dst() = hueRotate(src(),shift-autoShift);
    //dst() = autoShift;
  }
};