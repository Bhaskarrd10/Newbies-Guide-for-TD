

//This is a implementation of the ASC-CDL 1.2 Specification
//Unlike the OCIO CDL Transform it won't clip your blacks, or apply incorrect power functions. 

kernel CDLTransformKernel : ImageComputationKernel<ePixelWise>
{
  Image<eRead, eAccessPoint, eEdgeClamped> src; // the input image
  Image<eWrite> dst; // the output image

  param:
    float4 slope;  // This local variable is not exposed to the user.
    float4 offset;  // This local variable is not exposed to the user.
    float4 power;  // This local variable is not exposed to the user.
    float saturation;  // This local variable is not exposed to the user.
    bool forward;
    bool clamp;


  void define() {
    defineParam(slope, "slope", float4(1.0f));
    defineParam(offset, "offset", float4(0.0f));
    defineParam(power, "power", float4(1.0f));
    defineParam(saturation, "saturation", 1.0f);
    defineParam(forward, "forward", true);
    defineParam(clamp, "clamp", false);
  }


  void process() {

    SampleType(src) in = src();    

    float4 outSOP;
    float4 outSAT;    
    float luma;
    float4 out;
    float4 spo;


    if (forward){

      spo = (in * slope) + offset;
      outSOP.x = spo.x < 0.0f ? spo.x : pow(spo.x,power.x);
      outSOP.y = spo.y < 0.0f ? spo.y : pow(spo.y,power.y);
      outSOP.z = spo.z < 0.0f ? spo.z : pow(spo.z,power.z);
      outSOP.w = spo.w < 0.0f ? spo.w : pow(spo.w,power.w);

      luma = 0.2126f * outSOP.x + 0.7152f * outSOP.y + 0.0722f * outSOP.z;
      out = luma + saturation * (outSOP-luma);
    }
    else
    {

      luma = 0.2126f * in.x + 0.7152f * in.y + 0.0722f * in.z;

      outSAT = luma + ((in-luma)/saturation);

      out = (pow(outSAT,1.0f/power)-offset) / slope;
      out.x = outSAT.x < 0.0f ? (outSAT.x-offset.x) / slope.x : (pow(outSAT.x,1.0f/power.x)-offset.x) / slope.x;
      out.y = outSAT.y < 0.0f ? (outSAT.y-offset.y) / slope.y : (pow(outSAT.y,1.0f/power.y)-offset.y) / slope.y;
      out.z = outSAT.z < 0.0f ? (outSAT.z-offset.z) / slope.z : (pow(outSAT.z,1.0f/power.z)-offset.z) / slope.z;
      out.w = outSAT.w < 0.0f ? (outSAT.w-offset.w) / slope.w : (pow(outSAT.w,1.0f/power.w)-offset.w) / slope.w;
    }

    // Write the result to the output image
    dst() = out;
  }
};
