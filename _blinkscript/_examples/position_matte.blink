// ----------------------------------------------------------------
// aPMatte v1.0 by Adrian Pueyo
//
// Generate a matte of different shapes, based on a Position pass.
// Includes options to transform the mask and change its falloff.
// Also includes the option to output or overlay a P-based noise.
//
// adrianpueyo.com, 2017-2020
// ----------------------------------------------------------------


// Noise algorithm adapted by Adrian Pueyo from Noise4D function by Mads Hagbarth Lund
// Noise4D function Ported by Mads Hagbarth Lund 2014
// Based on https://github.com/Draradech/csworldgen/blob/master/simplexnoise.cpp

/* Copyright (c) 2007-2012 Eliot Eshelman
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 */


int fastfloor( const float x ) { return x > 0 ? (int) x : (int) x - 1; }
inline float raw_noise_4d( const float x, const float y, const float z, const float w ) 
{
int simplex[64][4] = {
    {0,1,2,3},{0,1,3,2},{0,0,0,0},{0,2,3,1},{0,0,0,0},{0,0,0,0},{0,0,0,0},{1,2,3,0},
    {0,2,1,3},{0,0,0,0},{0,3,1,2},{0,3,2,1},{0,0,0,0},{0,0,0,0},{0,0,0,0},{1,3,2,0},
    {0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},
    {1,2,0,3},{0,0,0,0},{1,3,0,2},{0,0,0,0},{0,0,0,0},{0,0,0,0},{2,3,0,1},{2,3,1,0},
    {1,0,2,3},{1,0,3,2},{0,0,0,0},{0,0,0,0},{0,0,0,0},{2,0,3,1},{0,0,0,0},{2,1,3,0},
    {0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},
    {2,0,1,3},{0,0,0,0},{0,0,0,0},{0,0,0,0},{3,0,1,2},{3,0,2,1},{0,0,0,0},{3,1,2,0},
    {2,1,0,3},{0,0,0,0},{0,0,0,0},{0,0,0,0},{3,1,0,2},{0,0,0,0},{3,2,0,1},{3,2,1,0}
};
    int perm[512] = {
        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,
        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,
        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,
        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,
        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,
        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,
        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,
        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,
        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,
        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,
        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,
        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,

        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,
        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,
        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,
        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,
        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,
        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,
        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,
        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,
        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,
        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,
        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,
        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180
    };
  int grad4[32][4]= {
    {0,1,1,1},  {0,1,1,-1},  {0,1,-1,1},  {0,1,-1,-1},
    {0,-1,1,1}, {0,-1,1,-1}, {0,-1,-1,1}, {0,-1,-1,-1},
    {1,0,1,1},  {1,0,1,-1},  {1,0,-1,1},  {1,0,-1,-1},
    {-1,0,1,1}, {-1,0,1,-1}, {-1,0,-1,1}, {-1,0,-1,-1},
    {1,1,0,1},  {1,1,0,-1},  {1,-1,0,1},  {1,-1,0,-1},
    {-1,1,0,1}, {-1,1,0,-1}, {-1,-1,0,1}, {-1,-1,0,-1},
    {1,1,1,0},  {1,1,-1,0},  {1,-1,1,0},  {1,-1,-1,0},
    {-1,1,1,0}, {-1,1,-1,0}, {-1,-1,1,0}, {-1,-1,-1,0}
  };
    float F4 = (sqrt(5.0f)-1.0)/4.0;
    float G4 = (5.0-sqrt(5.0f))/20.0;
    float n0, n1, n2, n3, n4;
    float s = (x + y + z + w) * F4;
    int i = fastfloor(x + s);
    int j = fastfloor(y + s);
    int k = fastfloor(z + s);
    int l = fastfloor(w + s);
    float t = (i + j + k + l) * G4;
    float X0 = i - t;
    float Y0 = j - t;
    float Z0 = k - t;
    float W0 = l - t;

    float x0 = x - X0;
    float y0 = y - Y0;
    float z0 = z - Z0;
    float w0 = w - W0;
    int c1 = (x0 > y0) ? 32 : 0;
    int c2 = (x0 > z0) ? 16 : 0;
    int c3 = (y0 > z0) ? 8 : 0;
    int c4 = (x0 > w0) ? 4 : 0;
    int c5 = (y0 > w0) ? 2 : 0;
    int c6 = (z0 > w0) ? 1 : 0;
    int c = c1 + c2 + c3 + c4 + c5 + c6;

    int i1, j1, k1, l1;
    int i2, j2, k2, l2;
    int i3, j3, k3, l3;
    i1 = simplex[c][0]>=3 ? 1 : 0;
    j1 = simplex[c][1]>=3 ? 1 : 0;
    k1 = simplex[c][2]>=3 ? 1 : 0;
    l1 = simplex[c][3]>=3 ? 1 : 0;
    i2 = simplex[c][0]>=2 ? 1 : 0;
    j2 = simplex[c][1]>=2 ? 1 : 0;
    k2 = simplex[c][2]>=2 ? 1 : 0;
    l2 = simplex[c][3]>=2 ? 1 : 0;
    i3 = simplex[c][0]>=1 ? 1 : 0;
    j3 = simplex[c][1]>=1 ? 1 : 0;
    k3 = simplex[c][2]>=1 ? 1 : 0;
    l3 = simplex[c][3]>=1 ? 1 : 0;
    float x1 = x0 - i1 + G4;
    float y1 = y0 - j1 + G4;
    float z1 = z0 - k1 + G4;
    float w1 = w0 - l1 + G4;
    float x2 = x0 - i2 + 2.0*G4;
    float y2 = y0 - j2 + 2.0*G4;
    float z2 = z0 - k2 + 2.0*G4;
    float w2 = w0 - l2 + 2.0*G4;
    float x3 = x0 - i3 + 3.0*G4;
    float y3 = y0 - j3 + 3.0*G4;
    float z3 = z0 - k3 + 3.0*G4;
    float w3 = w0 - l3 + 3.0*G4;
    float x4 = x0 - 1.0 + 4.0*G4;
    float y4 = y0 - 1.0 + 4.0*G4;
    float z4 = z0 - 1.0 + 4.0*G4;
    float w4 = w0 - 1.0 + 4.0*G4;
    int ii = i & 255;
    int jj = j & 255;
    int kk = k & 255;
    int ll = l & 255;
    int gi0 = perm[ii+perm[jj+perm[kk+perm[ll]]]] % 32;
    int gi1 = perm[ii+i1+perm[jj+j1+perm[kk+k1+perm[ll+l1]]]] % 32;
    int gi2 = perm[ii+i2+perm[jj+j2+perm[kk+k2+perm[ll+l2]]]] % 32;
    int gi3 = perm[ii+i3+perm[jj+j3+perm[kk+k3+perm[ll+l3]]]] % 32;
    int gi4 = perm[ii+1+perm[jj+1+perm[kk+1+perm[ll+1]]]] % 32;
    float t0 = 0.6 - x0*x0 - y0*y0 - z0*z0 - w0*w0;
    if(t0<0) n0 = 0.0;
    else {
        t0 *= t0;
        n0 = t0 * t0 * dot(float4(grad4[gi0][0],grad4[gi0][2],grad4[gi0][3],grad4[gi0][3]), float4(x0, y0, z0, w0));
    }
    float t1 = 0.6 - x1*x1 - y1*y1 - z1*z1 - w1*w1;
    if(t1<0) n1 = 0.0;
    else {
        t1 *= t1;
        n1 = t1 * t1 * dot(float4(grad4[gi1][0],grad4[gi1][2],grad4[gi1][3],grad4[gi1][3]), float4(x1, y1, z1, w1));
    }
    float t2 = 0.6 - x2*x2 - y2*y2 - z2*z2 - w2*w2;
    if(t2<0) n2 = 0.0;
    else {
        t2 *= t2;
        n2 = t2 * t2 * dot(float4(grad4[gi2][0],grad4[gi2][2],grad4[gi2][3],grad4[gi2][3]), float4(x2, y2, z2, w2));
    }
    float t3 = 0.6 - x3*x3 - y3*y3 - z3*z3 - w3*w3;
    if(t3<0) n3 = 0.0;
    else {
        t3 *= t3;
        n3 = t3 * t3 * dot(float4(grad4[gi3][0],grad4[gi3][2],grad4[gi3][3],grad4[gi3][3]), float4(x3, y3, z3, w3));
    }
    float t4 = 0.6 - x4*x4 - y4*y4 - z4*z4 - w4*w4;
    if(t4<0) n4 = 0.0;
    else {
        t4 *= t4;
        n4 = t4 * t4 * dot(float4(grad4[gi4][0],grad4[gi4][2],grad4[gi4][3],grad4[gi4][3]), float4(x4, y4, z4, w4));
    }
    return 27.0 * (n0 + n1 + n2 + n3 + n4);
}
inline float octave_noise_4d( const float octaves, const float persistence, const float scale, const float x, const float y, const float z, const float w, const float lacunarity=2 ) 
{
    float total = 0;
    float frequency = scale;
    float amplitude = 1;
    float maxAmplitude = 0;
    for( int i=0; i < octaves; i++ ) {
        total += (float)raw_noise_4d( x * frequency, y * frequency, z * frequency, w * frequency ) * amplitude;

        frequency *= lacunarity;
        maxAmplitude += amplitude;
        amplitude *= persistence;
    }
    return float(total / maxAmplitude);
}

kernel aPMatteKernel : ImageComputationKernel<ePixelWise>
{
  Image<eRead, eAccessPoint, eEdgeClamped> p;
  Image<eWrite> dst;

  param:
    float3 picked; //Center, or white for ramps
    float3 pickedB; //Black for ramps
    float4x4 m; //Camera or axis matrix.
    float radius;
    int shape; //0=sphere,1=cusped box,2=rounded box,3=ramp, 4=rad.ramp
    int invert_shape;
    int use_alpha;
    int mirrored;
    int falloff; //0=linear,1=smooth,2=square,3=inv.square
    float hardness;

    // Noise parameters here
    int use_noise; //0=off,1=overlay,2=noise only
    int noise_relative;
    int noise_octaves;
    float noise_persistence;
    float noise_lacunarity;
    float noise_scale;
    float noise_offset;
    float noise_add;
    float noise_gain;
    float noise_gamma;
    float noise_mix;

  void define() {
    defineParam(falloff, "falloff", 1);
    defineParam(use_noise, "use noise", 0);
    defineParam(noise_octaves, "noise octaves", 8);
    defineParam(noise_persistence, "noise persistence",  0.5f);
    defineParam(noise_lacunarity, "lacunarity",  2.0f);
    defineParam(noise_scale, "noise scale", 0.01f);
  }

  inline float rad(float deg){ 
    return deg*PI/180;
  }

  inline float smoothstep(float edge0, float edge1, float x){
    x = clamp((x - edge0)/(edge1 - edge0), 0.0f, 1.0f);
    return x*x*x*(x*(x*6-15)+10);
  }

  inline float cl(float val){
  return clamp(val,0.0f,1.0f); 
  }


  void process() {
    //1. P WORLD
    // Center the coordinates
    float3 color = float3(p(0)-picked.x,p(1)-picked.y,p(2)-picked.z);
    int black = 0;

    // Matrix!
    float4x4 mi = m;
    mi = mi.invert();
    for(int c = 0; c<dst.kComps; c++){
      color[c] = mi[c][0]*color[0] + mi[c][1]*color[1] + mi[c][2]*color[2] + mi[c][3]*1.0f;
    }

    //2. SHAPES
    float dist;
    float result;

    if(shape==0){//Sphere
      dist = sqrt(pow(color[0],2) + pow(color[1],2) + pow(color[2],2));
      result = radius==0.0f? 0:cl(1-dist/radius);
    } else if(shape==1){//Cusped Box
      result = min( min( cl((radius-fabs(color.x))/radius) , cl((radius-fabs(color.y))/radius)) , cl((radius-fabs(color.z))/radius)) ;
      result = hardness>=1? float(result>0) : result;
    } else if(shape==2){//Rounded Box
      result = radius==0.0f? 0: smoothstep(0,1-hardness, cl(1-fabs(float(color.x)/radius)) ) * smoothstep(0,1-hardness, cl(1-fabs(float(color.y)/radius)) ) * smoothstep(0,1-hardness, cl(1-fabs(float(color.z)/radius)) );
      result = hardness>=1? float(result>0) : result;
    } else if(shape==3){//Linear Ramp
      dist = sqrt(pow(color[0],2) + pow(color[1],2) + pow(color[2],2));
      float distB = sqrt(pow(color[0]-(pickedB.x-picked.x),2) + pow(color[1]-(pickedB.y-picked.y),2) + pow(color[2]-(pickedB.z-picked.z),2));
      float distWB = sqrt(pow(pickedB.x-picked.x,2) + pow(pickedB.y-picked.y,2) + pow(pickedB.z-picked.z,2));
      float angWB = acos( clamp((pow(dist,2)-pow(distB,2)+pow(distWB,2))/(2*dist*distWB),-1.0f,1.0f) );
      float cosAngWB = dist==0.0f? 0:cos(angWB);
      result = distWB==0? 0.0f: cl((dist * cosAngWB) / distWB );
      result = 1-result;
    } else if(shape==4){//Radial Ramp
      dist = sqrt(pow(color[0],2) + pow(color[1],2) + pow(color[2],2));
      float distB = sqrt(pow(color[0]-(pickedB.x-picked.x),2) + pow(color[1]-(pickedB.y-picked.y),2) + pow(color[2]-(pickedB.z-picked.z),2));
      float distWB = sqrt(pow(pickedB.x-picked.x,2) + pow(pickedB.y-picked.y,2) + pow(pickedB.z-picked.z,2));
      result = distWB==0? 0.0f: cl((dist) / distWB );
      result = 1-result;
    }
    result = mirrored ? result*(1-result)*4:result;
    result = invert_shape? 1-result:result;

    //3. FALLOFF
    if(falloff==0){//Linear
      result = hardness>=1? float(result>0) : cl(result/(1-hardness));
    }else if(falloff==1){//Smooth
      result = hardness>=1? float(result>0) : smoothstep(0,1-hardness,result);
    }else if(falloff==2){//Quadratic
      result = hardness>=1? float(result>0) : cl(pow(float(result/(1-hardness)),2));
    }else if(falloff==3){//Cubic
      result = hardness>=1? float(result>0) : cl(pow(float(result/(1-hardness)),3));
    }else if(falloff==4){//Inv. Cubic
      result = hardness>=1? float(result>0) : 1-cl(pow(float(cl(1-(result/(1-hardness)))),3));
    }

    //4. GENERATE NOISE
    float noise;
    if(use_noise!=0){//Avoid calculations if possible
      if(noise_relative!=1){
        noise = (float)octave_noise_4d(float(noise_octaves),noise_persistence,noise_scale==0?10000.0f:1/noise_scale,p(0),p(1),p(2),noise_offset,noise_lacunarity);
      }else{
        noise = (float)octave_noise_4d(float(noise_octaves),noise_persistence,noise_scale==0?10000.0f:1/noise_scale,color[0],color[1],color[2],noise_offset,noise_lacunarity);
      }
      noise = cl(pow(max((noise+noise_add)*noise_gain,0.0f),noise_gamma==0?1:1/noise_gamma));
    }


    //5. ALPHA MASK AND APPLY NOISE
    result = max(result,0.0f); //Clamp negative values
    if(use_noise==1){//Overlay
      result = result<0.5f? noise_mix*(2*noise*result)+(1-noise_mix)*result : noise_mix*(1-2*(1-result)*(1-noise))+(1-noise_mix)*result;
    }else if(use_noise>=2){
      result = noise*noise_mix;
    }

    if(use_alpha > 0) result=result*p(3);

    //6. WE'RE DONE
    dst() = result;
  }
};